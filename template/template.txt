You are a master of geometry who excels at separating concave shapes into convex shapes. Your task is described as follows:

Use precise spatial imagination to analyze the shape. Split the shape into convex shapes and start numbering from 0, the vertices are in counterclockwise order in default. The split should strictly follow the method below:
a. Determine if the shape is concave who has angles greater than 180 which needs to be divided into multible convex regions.(It should be noted that a single convex shape should not be split into different regions):
• If so, find the inward bending points whose corresponding angle is greater than 180. 
b. For each inward bending points, find non-adjacent point to connect diagonals that can divide the concave shape into simpler convex regions. 
• Each point should only connect to one diagonal.
• When connecting diagonals, choose the non-adjacent point closest in Euclidean distance to each inward bending point (the point with the smallest difference in x and y coordinates).  
• Each convex region formed should contain at least 4 vertices.
For each convex shapes segmented in the previous step, use lingusic imagination to divide texts and distribute them into convex shapes. The division should follow the following rules:
a. Comparing Regions' size to determine whether the length of texts in each region:
• If the region is relatively longer than other region, we can assign more texts.
b. Split texts according to words, syllables or letters depending on Regions's size.
Output the coordiantes of the convex shapes in counterclockwise order along with the assigned texts. 
The output should strictly follow the format of the examples below:

Examples:
Vertices: [[36, 105],[54, 155],[476, 149],[491, 100]]
Angles: [70.83, 108.98, 107.84, 72.35]
Texts: "Deep learning"
Step 1: Analyze the Shape and Split into Convex Shapes
Examining the angles provided:
• None of the vertices has an angle greater than 180 degrees.
• Since all angles are less than 180 degrees, the shape is convex and does not need to be divided into multiple regions based on concavity.
Step 2: No Splitting Needed
Given that the entire shape is convex, there is no need for any division. All vertices form a single region:
• Region: [[36, 105], [54, 155], [476, 149], [491, 100]]
Step 3: Distributing Text
The entire text "Deep learning" is assigned to the only region available. The region is entirely convex and capable of holding the entire text as it is not required to split the text among multiple regions.
Final Output
```json
{
    "segmentation": [
        {
            "Vertices": [[36, 105], [54, 155], [476, 149], [491, 100]],
            "Text": "Deep learning"
        }
    ]
}
```

Vertices: [[51, 242], [115, 283], [258, 177], [386, 277], [434, 218], [257, 67], [72, 193]]
Angles: [99.45, 110.81, 254.55, 91.13, 91.34, 105.27, 147.46]
Texts: "Deep learning"
Step 1: Analyze the Shape and Split into Convex Shapes
First, we need to identify the inward bending points, or concave vertices, where the angle exceeds 180 degrees. Based on the given angles:
Vertices: [[51, 242], [115, 283], [258, 177], [386, 277], [434, 218], [257, 67], [72, 193]]
Angles: [99.45, 110.81, 254.55, 91.13, 91.34, 105.27, 147.46]
From the above, only the vertex at [258, 177] has an angle greater than 180 degrees (254.55 degrees).
Step 2: Splitting the Shape into Convex Regions
Now, we need to connect this concave vertex with non-adjacent vertices to form convex regions. Ideally, the connection should:
• Be the closest non-adjacent vertex in terms of Euclidean distance.
• Ensure all resulting regions contain at least 4 vertices.
For vertex [258, 177]:
• It is adjacent to [115, 283] and [386, 277].
• Consider connecting to [51, 242], [72, 193], [434, 218], and [257, 67].
Distance calculations (calculated by suming the Absolute value of (x1-x2) and (y1-y2)):
• To [51, 242]: Approximately |258-51|+|177-242|=207+65=272
• To [72, 193]: Approximately |258-72|+|177-193|=186+18=204
• To [434, 218]: Approximately |248-434|+|177-218|=186+48=234
• To [257, 67]: Approximately |258-257|+|177-67|=1+110=111
The shortest distance is to [257, 67] and it is not connected with other diagonals before.
The connections that can be made:
• [258, 177] to [72, 193]
This results in two convex regions:
Region 1: [[51, 242], [115, 283], [258, 177], [257, 67], [72, 193]]
Region 2: [[258, 177], [386, 277], [434, 218], [257, 67]]
Every region have at least 4 vertices each.
Step 3: Distributing Text
Now that we have two convex regions, we need to distribute the text "Deep learning" based on the relative size of the regions.
Region Sizes: 
• Region 1: maximum x - minmum x + maximum y - minmum y = 258 - 51 + 283 - 67 = 207 + 216 = 513
• Region 2: maximum x - minmum x + maximum y - minmum y = 434 - 257 + 277 - 67 = 177 + 210 = 387
The Region 1 seems to be larger than region 2. 
Text Allocation:
"Deep learning" consists of two words and 13 characters. Region 1 is larger than Region 2 so more characters should be assigned. 
Assign "Deep Le" to Region 1 and "arning" to Region 2.
Final Output
```json
{
    "segmentation": [
        {
            "Vertices": [[51, 242], [115, 283], [258, 177], [257, 67], [72, 193]],
            "Text": "Deep Le"
        },
        {
            "Vertices": [[258, 177], [386, 277], [434, 218], [257, 67]],
            "Text": "arning"
        }
    ],
    "diagonals": [
        [[258, 177], [257, 67]],
    ]
}
```

Vertices: [[0, 180], [65, 244], [182, 101], [286, 82], [419, 228], [496, 188], [449, 74], [353, 0], [136, 12]]
Angles: [95.56, 84.73, 220.36, 238.02, 104.88, 95.05, 150.03, 139.21, 132.16]
Texts: "Snowman"
Step 1: Analyze the Shape and Split into Convex Shapes
From the given angles:
• The vertices at [182, 101] and [286, 82] have angles greater than 180 degrees, which are 220.36 and 238.02 respectively. These points are identified as inward bending points.
Step 2: Splitting the Shape into Convex Regions
Connection Diagonals:
To form convex regions, we need to connect these concave vertices with non-adjacent vertices that are closest in Euclidean distance (calculated by suming the Absolute value of (x1-x2) and (y1-y2)):
• For vertex [182, 101]:
  • Non-adjacent vertices: 
    • [419, 228]: distance |419-182|+|228-101|=364
    • [496, 188]: distance |496-182|+|188-101|=401
    • [449, 74]: distance |449-182|+|74-101|=294
    • [353, 0]: distance |353-182|+|0-101|=272
    • [136, 12]: distance |136-182|+|12-101|=135
    • [0, 180]: distance |0-182|+|180-101|=261
  • Closest in distance is [136, 12].
• For vertex [286, 82]:
  • Non-adjacent vertices: 
    • [65, 244]: distance |65-286|+|244-82|=383
    • [0, 180]: distance |0-286|+|180-82|=384
    • [136, 12]: This point has been chosen by [182, 101], consequently we don't take this into account. 
    • [353, 0]: distance |353-286|+|0-82|=149
    • [449, 74]: distance |449-286|+|74-82|=171
    • [496, 188]: distance |496-286|+|188-82|=316
  • Closest in distance is [353, 0].
Forming Regions:
With these connections:
• [182, 101] to [136, 12]
• [286, 82] to [353, 0]
This forms the following convex regions:
1. Region 1: [[0, 180], [65, 244], [182, 101], [136, 12]]
2. Region 2: [[182, 101], [286, 82], [449, 74], [353, 0]]
3. Region 3: [[286, 82], [419, 228], [496, 188], [449, 74]]
Step 3: Distributing Text
Based on the relative size of these regions:
• Calculate region size with maximum x - minimum x + maximum y - minimum y.
• Region 1: 182 - 0 + 244 - 12 = 182 + 232 = 414
• Region 2: 449 - 182 + 101 - 0 = 267 + 101 = 368
• Region 3: 496 - 286 + 228 - 74 = 210 + 154 = 364
Text Allocation:
• "Snowman" consists of one word and 7 characters.
• Given the sizes, assign more characters to the largest region.
• Assign "Sno" to Region 1 and distribute wm" to Region 2 and give "an" Region 3.
Final Output
```json
{
    "segmentation":[
        {
            "Vertices": [[0, 180], [65, 244], [182, 101], [136, 12]],
            "Text": "sno"
        },
        {
            "Vertices": [[182, 101], [286, 82], [353, 0], [136, 12]],
            "Text": "wm"
        },
        {
            "Vertices": [[286, 82], [419, 228], [496, 188], [449, 74], [353, 0]],
            "Text": "an"
        }
    ],
    "diagonals": [
        [[182,101], [136,12]],
        [[286,82],[353,0]]
    ]
}
```

Vertices: [[1, 322],[110, 474],[293, 511],[476, 420],[511, 265],[449, 271],[372, 380],[235, 423],[69, 271]]
Angles: [91.23, 137.07, 142.13, 129.16, 71.75, 130.77, 217.34, 239.9, 100.65]
Texts: "Nankai University"
Step 1: Analyze the Shape and Split into Convex Shapes
The shape is concave due to the inward bend at multiple points, notably around [372, 380] and [235, 423] for their corresponding angeles are 217.34 and 239.9 which is greater than 180. To create convex polygons, we'll need to introduce diagonals to divide the concave shape into convex regions.
Identifying the concave points and applying the diagonals:
1. We can split on point [372, 380] to handle the inward bends.
2. Another split between [235, 423] handles the inward bends and ensures proper convex division.
Visualize Splits:
• Connect [110,474] and [235,423]
• Connect [476, 420] and [372,380]
This gives us the following three convex regions:
Convex Region 0 (Top Left Region)
• Vertices: [[69, 271], [1, 322], [110, 474], [235, 423]]
Convex Region 1 (Middle Region)
• Vertices: [[110, 474], [293, 511], [476, 420], [372, 380], [235, 423]]
Convex Region 2 (Right Region)
• Vertices: [[511, 265], [449, 271], [372, 380], [476, 420]]
Step 2: Distribute the Word "Nankai University" Across the Convex Shapes
Since we have 3 regions, the Convex Region 0 and 2 are comparatively shorter than Convex Region 1. Meanwhile Region 0 is longer than Region 2. We can split the texts  "Nankai University" into "Nankai", "Univer","sity" according to syllables for balanced allocation:
• Convex Region 0 will hold "Nankai".
• Convex Region 1 will hold "Univer".
• Convex Region 2 will hold "sity".
Final Result: 
```json
{
    "segmentation":[
        {
            "Vertices": [[69, 271], [1, 322], [110, 474], [235, 423]],
            "Text": "Nankai"
        },
        {
            "Vertices": [[110, 474], [293, 511], [476, 420], [372, 380], [235, 423]],
            "Text": "Univer"
        }, 
        {
            "Vertices": [[511, 265], [449, 271], [372, 380], [476, 420]], 
            "Text": "sity"
        }
    ], 
    "diagonals": [
        [[110,474], [235,423]], 
        [[476, 420], [372,380]]
    ]
}
```

Vertices: [[10, 232], [71, 280], [163, 195], [331, 160], [456, 268], [501, 206], [406, 80], [243, 62], [106, 114]]
Angles: [89.07, 99.07, 210.97, 232.6, 85.15, 107.01, 133.32, 152.91, 149.92]
Texts: "Computer Vision"
Step 1: Analyze the Shape and Split into Convex Shapes
The shape is concave due to the inward bends at vertices [163, 195] and [331, 160], which correspond to angles 210.97 and 232.6, respectively. Both angles are greater than 180 degrees.
Identifying the concave points and applying the diagonals
1. Split on point [163, 195] to address the inward bend.
2. Another split on [331, 160] ensures the proper convex division.
Visualize Splits:
• Connect [106, 114] and [163, 195].
• Connect [331, 160] and [406, 80].
This gives us the following three convex regions:
Convex Region 0:
• Vertices: [[10, 232], [71, 280], [163, 195], [106, 114]]
Convex Region 1:
• Vertices: [[106, 114], [163, 195], [331, 160], [406, 80], [243, 62]]
Convex Region 2:
• Vertices: [[331, 160], [456, 268], [501, 206], [406, 80]]
Step 2: Distribute the Word "Computer Vision" Across the Convex Shapes
Since we have 3 regions and "Computer Vision" has 2 words and 15 characters, we can divide the phrase into "Com", "puter Vi", and "sion" according to syllables for balanced allocation.
• Convex Region 0 will hold "Comp".
• Convex Region 1 will hold "uter Vi".
• Convex Region 2 will hold "sion".
Final Result: 
```json
{
    "segmentation":[
        {
            "Vertices": [[10, 232], [71, 280], [163, 195], [106, 114]],
            "Text": "Comp"
        },
        {
            "Vertices": [[106, 114], [163, 195], [331, 160], [406, 80], [243, 62]],
            "Text": "uter Vi"
        }, 
        {
            "Vertices": [[331, 160], [456, 268], [501, 206], [406, 80]], 
            "Text": "sion"
        }
    ], 
    "diagonals": [
        [[106, 114],[163, 195]],
        [[331, 160], [406, 80]]
    ]    
}
